"use strict";
const api_1 = require("./api");
class EyesOverride extends api_1.Eyes {
}
EyesOverride._sdk = {
    ...api_1.Eyes._sdk,
    agentId: `eyes-webdriverio-service/${require('../package.json').version}`,
};
class EyesService {
    constructor(config) {
        const { useExecutionCloud, useVisualGrid, concurrency, ...eyesConfig } = config;
        this._config = { useExecutionCloud, useVisualGrid, concurrency };
        this._eyes = new EyesOverride(this._config.useVisualGrid
            ? new api_1.VisualGridRunner({ testConcurrency: this._config.concurrency })
            : new api_1.ClassicRunner(), eyesConfig);
    }
    async _eyesOpen() {
        if (!this._eyes.isOpen)
            await this._eyes.open(browser);
    }
    async _eyesClose() {
        if (this._eyes.isOpen)
            await this._eyes.closeAsync();
    }
    async beforeSession(options) {
        if (this._config.useExecutionCloud) {
            const url = new URL(await this._eyes.getExecutionCloudUrl());
            options.protocol = url.protocol ? url.protocol.replace(/:$/, '') : undefined;
            options.hostname = url.hostname;
            if (url.port)
                options.port = Number(url.port);
            else if (options.protocol === 'http')
                options.port = 80;
            else if (options.protocol === 'https')
                options.port = 443;
            options.path = url.pathname;
        }
        if (options.enableEyesLogs || this._config.enableEyesLogs) {
            this._eyes.setLogHandler({ type: 'console' });
        }
    }
    async before() {
        var _a;
        var _b;
        (_a = (_b = this._eyes.configuration).viewportSize) !== null && _a !== void 0 ? _a : (_b.viewportSize = { width: 800, height: 600 });
        browser.addCommand('getEyes', () => {
            return this._eyes;
        });
        browser.addCommand('eyesGetConfiguration', () => {
            return this._eyes.getConfiguration();
        });
        browser.addCommand('eyesSetConfiguration', (configuration) => {
            return this._eyes.setConfiguration(configuration);
        });
        browser.addCommand('eyesCheck', async (...args) => {
            await this._eyesOpen();
            return this._eyes.check(...args);
        });
        browser.addCommand('eyesGetResults', async (throwErr) => {
            await this._eyesClose();
            return this._eyes.getResults(throwErr);
        });
        browser.addCommand('eyesGetAllTestResults', async (throwErr) => {
            return this._eyes.runner.getAllTestResults(throwErr);
        });
        // renamed
        browser.addCommand('eyesCheckWindow', async (...args) => {
            return browser.eyesCheck(...args);
        });
        // renamed + improved
        browser.addCommand('eyesGetTestResults', async () => {
            const [result] = await browser.eyesGetResults();
            return result;
        });
        // should be set through check settings or configuration
        browser.addCommand('eyesSetScrollRootElement', (element) => {
            this._eyes.getConfiguration().setScrollRootElement(element);
        });
        // should be set through configuration
        browser.addCommand('eyesAddProperty', (key, value) => {
            this._eyes.getConfiguration().addProperty(key, value);
        });
        // should be set through configuration
        browser.addCommand('eyesClearProperties', () => {
            this._eyes.getConfiguration().clearProperties();
        });
        // useless
        browser.addCommand('eyesGetIsOpen', () => {
            return this._eyes.getIsOpen();
        });
    }
    async beforeTest(test) {
        var _a, _b, _c, _d, _e;
        var _f, _g;
        (_a = (_f = this._eyes.configuration).appName) !== null && _a !== void 0 ? _a : (_f.appName = (_b = test.parent /* mocha */) !== null && _b !== void 0 ? _b : (_c = test.fullName) === null || _c === void 0 ? void 0 : _c.replace(` ${test.description}`, '')); /* jasmine */
        (_d = (_g = this._eyes.configuration).testName) !== null && _d !== void 0 ? _d : (_g.testName = (_e = test.title /* mocha */) !== null && _e !== void 0 ? _e : test.description); /* jasmine */
    }
    async afterTest() {
        this._eyes.configuration.appName = undefined;
        this._eyes.configuration.testName = undefined;
        this._eyes.configuration.scrollRootElement = undefined;
        await this._eyesClose();
    }
    async after() {
        await this._eyes.runner.getAllTestResults(false);
    }
}
module.exports = EyesService;
